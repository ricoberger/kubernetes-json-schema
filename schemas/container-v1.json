{
  "description": "A single application container that you want to run within a pod.",
  "type": "object",
  "required": [
    "name"
  ],
  "properties": {
    "args": {
      "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "string",
          "null"
        ]
      },
      "x-kubernetes-list-type": "atomic"
    },
    "command": {
      "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": [
          "string",
          "null"
        ]
      },
      "x-kubernetes-list-type": "atomic"
    },
    "env": {
      "description": "List of environment variables to set in the container. Cannot be updated.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "EnvVar represents an environment variable present in a Container.",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Name of the environment variable. May consist of any printable ASCII characters except '='.",
            "type": "string"
          },
          "value": {
            "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
            "type": [
              "string",
              "null"
            ]
          },
          "valueFrom": {
            "description": "EnvVarSource represents a source for the value of an EnvVar.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "configMapKeyRef": {
                "description": "Selects a key from a ConfigMap.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "The key to select.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "optional": {
                    "description": "Specify whether the ConfigMap or its key must be defined",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "fieldRef": {
                "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "fieldPath"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "fieldPath": {
                    "description": "Path of the field to select in the specified API version.",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "fileKeyRef": {
                "description": "FileKeySelector selects a key of the env file.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "volumeName",
                  "path",
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "The key within the env file. An invalid key will prevent the pod from starting. The keys defined within a source may consist of any printable ASCII characters except '='. During Alpha stage of the EnvFiles feature gate, the key size is limited to 128 characters.",
                    "type": "string"
                  },
                  "optional": {
                    "description": "Specify whether the file or its key must be defined. If the file or key does not exist, then the env var is not published. If optional is set to true and the specified key does not exist, the environment variable will not be set in the Pod's containers.\n\nIf optional is set to false and the specified key does not exist, an error will be returned during Pod creation.",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "path": {
                    "description": "The path within the volume from which to select the file. Must be relative and may not contain the '..' path or start with '..'.",
                    "type": "string"
                  },
                  "volumeName": {
                    "description": "The name of the volume mount containing the env file.",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "resourceFieldRef": {
                "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "resource"
                ],
                "properties": {
                  "containerName": {
                    "description": "Container name: required for volumes, optional for env vars",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "divisor": {
                    "oneOf": [
                      {
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      {
                        "type": [
                          "number",
                          "null"
                        ]
                      }
                    ]
                  },
                  "resource": {
                    "description": "Required: resource to select",
                    "type": "string"
                  }
                },
                "x-kubernetes-map-type": "atomic"
              },
              "secretKeyRef": {
                "description": "SecretKeySelector selects a key of a Secret.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "key"
                ],
                "properties": {
                  "key": {
                    "description": "The key of the secret to select from.  Must be a valid secret key.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "optional": {
                    "description": "Specify whether the Secret or its key must be defined",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  }
                },
                "x-kubernetes-map-type": "atomic"
              }
            }
          }
        }
      },
      "x-kubernetes-list-map-keys": [
        "name"
      ],
      "x-kubernetes-list-type": "map",
      "x-kubernetes-patch-merge-key": "name",
      "x-kubernetes-patch-strategy": "merge"
    },
    "envFrom": {
      "description": "List of sources to populate environment variables in the container. The keys defined within a source may consist of any printable ASCII characters except '='. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "EnvFromSource represents the source of a set of ConfigMaps or Secrets",
        "type": [
          "object",
          "null"
        ],
        "properties": {
          "configMapRef": {
            "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "name": {
                "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                "type": [
                  "string",
                  "null"
                ]
              },
              "optional": {
                "description": "Specify whether the ConfigMap must be defined",
                "type": [
                  "boolean",
                  "null"
                ]
              }
            }
          },
          "prefix": {
            "description": "Optional text to prepend to the name of each environment variable. May consist of any printable ASCII characters except '='.",
            "type": [
              "string",
              "null"
            ]
          },
          "secretRef": {
            "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "name": {
                "description": "Name of the referent. This field is effectively required, but due to backwards compatibility is allowed to be empty. Instances of this type with an empty value here are almost certainly wrong. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                "type": [
                  "string",
                  "null"
                ]
              },
              "optional": {
                "description": "Specify whether the Secret must be defined",
                "type": [
                  "boolean",
                  "null"
                ]
              }
            }
          }
        }
      },
      "x-kubernetes-list-type": "atomic"
    },
    "image": {
      "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
      "type": [
        "string",
        "null"
      ]
    },
    "imagePullPolicy": {
      "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "Always",
        "IfNotPresent",
        "Never"
      ]
    },
    "lifecycle": {
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "postStart": {
          "description": "LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "exec": {
              "description": "ExecAction describes a \"run in container\" action.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "command": {
                  "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "x-kubernetes-list-type": "atomic"
                }
              }
            },
            "httpGet": {
              "description": "HTTPGetAction describes an action based on HTTP Get requests.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "port"
              ],
              "properties": {
                "host": {
                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "httpHeaders": {
                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "name": {
                        "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                        "type": "string"
                      },
                      "value": {
                        "description": "The header field value",
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "path": {
                  "description": "Path to access on the HTTP server.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "port": {
                  "oneOf": [
                    {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    {
                      "type": [
                        "integer",
                        "null"
                      ]
                    }
                  ]
                },
                "scheme": {
                  "description": "Scheme to use for connecting to the host. Defaults to HTTP.\n\nPossible enum values:\n - `\"HTTP\"` means that the scheme used will be http://\n - `\"HTTPS\"` means that the scheme used will be https://",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "HTTP",
                    "HTTPS"
                  ]
                }
              }
            },
            "sleep": {
              "description": "SleepAction describes a \"sleep\" action.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "seconds"
              ],
              "properties": {
                "seconds": {
                  "description": "Seconds is the number of seconds to sleep.",
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "tcpSocket": {
              "description": "TCPSocketAction describes an action based on opening a socket",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "port"
              ],
              "properties": {
                "host": {
                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "port": {
                  "oneOf": [
                    {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    {
                      "type": [
                        "integer",
                        "null"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "preStop": {
          "description": "LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "exec": {
              "description": "ExecAction describes a \"run in container\" action.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "command": {
                  "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "x-kubernetes-list-type": "atomic"
                }
              }
            },
            "httpGet": {
              "description": "HTTPGetAction describes an action based on HTTP Get requests.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "port"
              ],
              "properties": {
                "host": {
                  "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "httpHeaders": {
                  "description": "Custom headers to set in the request. HTTP allows repeated headers.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "name": {
                        "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                        "type": "string"
                      },
                      "value": {
                        "description": "The header field value",
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "path": {
                  "description": "Path to access on the HTTP server.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "port": {
                  "oneOf": [
                    {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    {
                      "type": [
                        "integer",
                        "null"
                      ]
                    }
                  ]
                },
                "scheme": {
                  "description": "Scheme to use for connecting to the host. Defaults to HTTP.\n\nPossible enum values:\n - `\"HTTP\"` means that the scheme used will be http://\n - `\"HTTPS\"` means that the scheme used will be https://",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "HTTP",
                    "HTTPS"
                  ]
                }
              }
            },
            "sleep": {
              "description": "SleepAction describes a \"sleep\" action.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "seconds"
              ],
              "properties": {
                "seconds": {
                  "description": "Seconds is the number of seconds to sleep.",
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "tcpSocket": {
              "description": "TCPSocketAction describes an action based on opening a socket",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "port"
              ],
              "properties": {
                "host": {
                  "description": "Optional: Host name to connect to, defaults to the pod IP.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "port": {
                  "oneOf": [
                    {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    {
                      "type": [
                        "integer",
                        "null"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "stopSignal": {
          "description": "StopSignal defines which signal will be sent to a container when it is being stopped. If not specified, the default is defined by the container runtime in use. StopSignal can only be set for Pods with a non-empty .spec.os.name\n\nPossible enum values:\n - `\"SIGABRT\"`\n - `\"SIGALRM\"`\n - `\"SIGBUS\"`\n - `\"SIGCHLD\"`\n - `\"SIGCLD\"`\n - `\"SIGCONT\"`\n - `\"SIGFPE\"`\n - `\"SIGHUP\"`\n - `\"SIGILL\"`\n - `\"SIGINT\"`\n - `\"SIGIO\"`\n - `\"SIGIOT\"`\n - `\"SIGKILL\"`\n - `\"SIGPIPE\"`\n - `\"SIGPOLL\"`\n - `\"SIGPROF\"`\n - `\"SIGPWR\"`\n - `\"SIGQUIT\"`\n - `\"SIGRTMAX\"`\n - `\"SIGRTMAX-1\"`\n - `\"SIGRTMAX-10\"`\n - `\"SIGRTMAX-11\"`\n - `\"SIGRTMAX-12\"`\n - `\"SIGRTMAX-13\"`\n - `\"SIGRTMAX-14\"`\n - `\"SIGRTMAX-2\"`\n - `\"SIGRTMAX-3\"`\n - `\"SIGRTMAX-4\"`\n - `\"SIGRTMAX-5\"`\n - `\"SIGRTMAX-6\"`\n - `\"SIGRTMAX-7\"`\n - `\"SIGRTMAX-8\"`\n - `\"SIGRTMAX-9\"`\n - `\"SIGRTMIN\"`\n - `\"SIGRTMIN+1\"`\n - `\"SIGRTMIN+10\"`\n - `\"SIGRTMIN+11\"`\n - `\"SIGRTMIN+12\"`\n - `\"SIGRTMIN+13\"`\n - `\"SIGRTMIN+14\"`\n - `\"SIGRTMIN+15\"`\n - `\"SIGRTMIN+2\"`\n - `\"SIGRTMIN+3\"`\n - `\"SIGRTMIN+4\"`\n - `\"SIGRTMIN+5\"`\n - `\"SIGRTMIN+6\"`\n - `\"SIGRTMIN+7\"`\n - `\"SIGRTMIN+8\"`\n - `\"SIGRTMIN+9\"`\n - `\"SIGSEGV\"`\n - `\"SIGSTKFLT\"`\n - `\"SIGSTOP\"`\n - `\"SIGSYS\"`\n - `\"SIGTERM\"`\n - `\"SIGTRAP\"`\n - `\"SIGTSTP\"`\n - `\"SIGTTIN\"`\n - `\"SIGTTOU\"`\n - `\"SIGURG\"`\n - `\"SIGUSR1\"`\n - `\"SIGUSR2\"`\n - `\"SIGVTALRM\"`\n - `\"SIGWINCH\"`\n - `\"SIGXCPU\"`\n - `\"SIGXFSZ\"`",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "SIGABRT",
            "SIGALRM",
            "SIGBUS",
            "SIGCHLD",
            "SIGCLD",
            "SIGCONT",
            "SIGFPE",
            "SIGHUP",
            "SIGILL",
            "SIGINT",
            "SIGIO",
            "SIGIOT",
            "SIGKILL",
            "SIGPIPE",
            "SIGPOLL",
            "SIGPROF",
            "SIGPWR",
            "SIGQUIT",
            "SIGRTMAX",
            "SIGRTMAX-1",
            "SIGRTMAX-10",
            "SIGRTMAX-11",
            "SIGRTMAX-12",
            "SIGRTMAX-13",
            "SIGRTMAX-14",
            "SIGRTMAX-2",
            "SIGRTMAX-3",
            "SIGRTMAX-4",
            "SIGRTMAX-5",
            "SIGRTMAX-6",
            "SIGRTMAX-7",
            "SIGRTMAX-8",
            "SIGRTMAX-9",
            "SIGRTMIN",
            "SIGRTMIN+1",
            "SIGRTMIN+10",
            "SIGRTMIN+11",
            "SIGRTMIN+12",
            "SIGRTMIN+13",
            "SIGRTMIN+14",
            "SIGRTMIN+15",
            "SIGRTMIN+2",
            "SIGRTMIN+3",
            "SIGRTMIN+4",
            "SIGRTMIN+5",
            "SIGRTMIN+6",
            "SIGRTMIN+7",
            "SIGRTMIN+8",
            "SIGRTMIN+9",
            "SIGSEGV",
            "SIGSTKFLT",
            "SIGSTOP",
            "SIGSYS",
            "SIGTERM",
            "SIGTRAP",
            "SIGTSTP",
            "SIGTTIN",
            "SIGTTOU",
            "SIGURG",
            "SIGUSR1",
            "SIGUSR2",
            "SIGVTALRM",
            "SIGWINCH",
            "SIGXCPU",
            "SIGXFSZ"
          ]
        }
      }
    },
    "livenessProbe": {
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "exec": {
          "description": "ExecAction describes a \"run in container\" action.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "command": {
              "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "x-kubernetes-list-type": "atomic"
            }
          }
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "grpc": {
          "description": "GRPCAction specifies an action involving a GRPC service.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "port"
          ],
          "properties": {
            "port": {
              "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
              "type": "integer",
              "format": "int32"
            },
            "service": {
              "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "httpGet": {
          "description": "HTTPGetAction describes an action based on HTTP Get requests.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "port"
          ],
          "properties": {
            "host": {
              "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
              "type": [
                "string",
                "null"
              ]
            },
            "httpHeaders": {
              "description": "Custom headers to set in the request. HTTP allows repeated headers.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The header field value",
                    "type": "string"
                  }
                }
              },
              "x-kubernetes-list-type": "atomic"
            },
            "path": {
              "description": "Path to access on the HTTP server.",
              "type": [
                "string",
                "null"
              ]
            },
            "port": {
              "oneOf": [
                {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                {
                  "type": [
                    "integer",
                    "null"
                  ]
                }
              ]
            },
            "scheme": {
              "description": "Scheme to use for connecting to the host. Defaults to HTTP.\n\nPossible enum values:\n - `\"HTTP\"` means that the scheme used will be http://\n - `\"HTTPS\"` means that the scheme used will be https://",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "HTTP",
                "HTTPS"
              ]
            }
          }
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "tcpSocket": {
          "description": "TCPSocketAction describes an action based on opening a socket",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "port"
          ],
          "properties": {
            "host": {
              "description": "Optional: Host name to connect to, defaults to the pod IP.",
              "type": [
                "string",
                "null"
              ]
            },
            "port": {
              "oneOf": [
                {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                {
                  "type": [
                    "integer",
                    "null"
                  ]
                }
              ]
            }
          }
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        }
      }
    },
    "name": {
      "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
      "type": [
        "string",
        "null"
      ]
    },
    "ports": {
      "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "ContainerPort represents a network port in a single container.",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "containerPort"
        ],
        "properties": {
          "containerPort": {
            "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.",
            "type": "integer",
            "format": "int32"
          },
          "hostIP": {
            "description": "What host IP to bind the external port to.",
            "type": [
              "string",
              "null"
            ]
          },
          "hostPort": {
            "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
            "type": [
              "integer",
              "null"
            ],
            "format": "int32"
          },
          "name": {
            "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
            "type": [
              "string",
              "null"
            ]
          },
          "protocol": {
            "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "SCTP",
              "TCP",
              "UDP"
            ]
          }
        }
      },
      "x-kubernetes-list-map-keys": [
        "containerPort",
        "protocol"
      ],
      "x-kubernetes-list-type": "map",
      "x-kubernetes-patch-merge-key": "containerPort",
      "x-kubernetes-patch-strategy": "merge"
    },
    "readinessProbe": {
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "exec": {
          "description": "ExecAction describes a \"run in container\" action.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "command": {
              "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "x-kubernetes-list-type": "atomic"
            }
          }
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "grpc": {
          "description": "GRPCAction specifies an action involving a GRPC service.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "port"
          ],
          "properties": {
            "port": {
              "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
              "type": "integer",
              "format": "int32"
            },
            "service": {
              "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "httpGet": {
          "description": "HTTPGetAction describes an action based on HTTP Get requests.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "port"
          ],
          "properties": {
            "host": {
              "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
              "type": [
                "string",
                "null"
              ]
            },
            "httpHeaders": {
              "description": "Custom headers to set in the request. HTTP allows repeated headers.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The header field value",
                    "type": "string"
                  }
                }
              },
              "x-kubernetes-list-type": "atomic"
            },
            "path": {
              "description": "Path to access on the HTTP server.",
              "type": [
                "string",
                "null"
              ]
            },
            "port": {
              "oneOf": [
                {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                {
                  "type": [
                    "integer",
                    "null"
                  ]
                }
              ]
            },
            "scheme": {
              "description": "Scheme to use for connecting to the host. Defaults to HTTP.\n\nPossible enum values:\n - `\"HTTP\"` means that the scheme used will be http://\n - `\"HTTPS\"` means that the scheme used will be https://",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "HTTP",
                "HTTPS"
              ]
            }
          }
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "tcpSocket": {
          "description": "TCPSocketAction describes an action based on opening a socket",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "port"
          ],
          "properties": {
            "host": {
              "description": "Optional: Host name to connect to, defaults to the pod IP.",
              "type": [
                "string",
                "null"
              ]
            },
            "port": {
              "oneOf": [
                {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                {
                  "type": [
                    "integer",
                    "null"
                  ]
                }
              ]
            }
          }
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        }
      }
    },
    "resizePolicy": {
      "description": "Resources resize policy for the container.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "ContainerResizePolicy represents resource resize policy for the container.",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "resourceName",
          "restartPolicy"
        ],
        "properties": {
          "resourceName": {
            "description": "Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.",
            "type": "string"
          },
          "restartPolicy": {
            "description": "Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.",
            "type": "string"
          }
        }
      },
      "x-kubernetes-list-type": "atomic"
    },
    "resources": {
      "description": "ResourceRequirements describes the compute resource requirements.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "claims": {
          "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis field depends on the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                "type": "string"
              },
              "request": {
                "description": "Request is the name chosen for a request in the referenced claim. If empty, everything from the claim is made available, otherwise only the result of this request.",
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "limits": {
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "oneOf": [
              {
                "type": [
                  "string",
                  "null"
                ]
              },
              {
                "type": [
                  "number",
                  "null"
                ]
              }
            ]
          }
        },
        "requests": {
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "oneOf": [
              {
                "type": [
                  "string",
                  "null"
                ]
              },
              {
                "type": [
                  "number",
                  "null"
                ]
              }
            ]
          }
        }
      }
    },
    "restartPolicy": {
      "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This overrides the pod-level restart policy. When this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Additionally, setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
      "type": [
        "string",
        "null"
      ]
    },
    "restartPolicyRules": {
      "description": "Represents a list of rules to be checked to determine if the container should be restarted on exit. The rules are evaluated in order. Once a rule matches a container exit condition, the remaining rules are ignored. If no rule matches the container exit condition, the Container-level restart policy determines the whether the container is restarted or not. Constraints on the rules: - At most 20 rules are allowed. - Rules can have the same action. - Identical rules are not forbidden in validations. When rules are specified, container MUST set RestartPolicy explicitly even it if matches the Pod's RestartPolicy.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "ContainerRestartRule describes how a container exit is handled.",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "action"
        ],
        "properties": {
          "action": {
            "description": "Specifies the action taken on a container exit if the requirements are satisfied. The only possible value is \"Restart\" to restart the container.",
            "type": "string"
          },
          "exitCodes": {
            "description": "ContainerRestartRuleOnExitCodes describes the condition for handling an exited container based on its exit codes.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "operator"
            ],
            "properties": {
              "operator": {
                "description": "Represents the relationship between the container exit code(s) and the specified values. Possible values are: - In: the requirement is satisfied if the container exit code is in the\n  set of specified values.\n- NotIn: the requirement is satisfied if the container exit code is\n  not in the set of specified values.",
                "type": "string"
              },
              "values": {
                "description": "Specifies the set of values to check for container exit codes. At most 255 elements are allowed.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32"
                },
                "x-kubernetes-list-type": "set"
              }
            }
          }
        }
      },
      "x-kubernetes-list-type": "atomic"
    },
    "securityContext": {
      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "appArmorProfile": {
          "description": "AppArmorProfile defines a pod or container's AppArmor settings.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "type"
          ],
          "properties": {
            "localhostProfile": {
              "description": "localhostProfile indicates a profile loaded on the node that should be used. The profile must be preconfigured on the node to work. Must match the loaded name of the profile. Must be set if and only if type is \"Localhost\".",
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "description": "type indicates which kind of AppArmor profile will be applied. Valid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.\n\nPossible enum values:\n - `\"Localhost\"` indicates that a profile pre-loaded on the node should be used.\n - `\"RuntimeDefault\"` indicates that the container runtime's default AppArmor profile should be used.\n - `\"Unconfined\"` indicates that no AppArmor profile should be enforced.",
              "type": "string",
              "enum": [
                "Localhost",
                "RuntimeDefault",
                "Unconfined"
              ]
            }
          },
          "x-kubernetes-unions": [
            {
              "discriminator": "type",
              "fields-to-discriminateBy": {
                "localhostProfile": "LocalhostProfile"
              }
            }
          ]
        },
        "capabilities": {
          "description": "Adds and removes POSIX capabilities from running containers.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "add": {
              "description": "Added capabilities",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "x-kubernetes-list-type": "atomic"
            },
            "drop": {
              "description": "Removed capabilities",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "x-kubernetes-list-type": "atomic"
            }
          }
        },
        "privileged": {
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "procMount": {
          "description": "procMount denotes the type of proc mount to use for the containers. The default value is Default which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.\n\nPossible enum values:\n - `\"Default\"` uses the container runtime defaults for readonly and masked paths for /proc. Most container runtimes mask certain paths in /proc to avoid accidental security exposure of special devices or information.\n - `\"Unmasked\"` bypasses the default masking behavior of the container runtime and ensures the newly created /proc the container stays in tact with no modifications.",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "Default",
            "Unmasked"
          ]
        },
        "readOnlyRootFilesystem": {
          "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "seLinuxOptions": {
          "description": "SELinuxOptions are the labels to be applied to the container",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "level": {
              "description": "Level is SELinux level label that applies to the container.",
              "type": [
                "string",
                "null"
              ]
            },
            "role": {
              "description": "Role is a SELinux role label that applies to the container.",
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "description": "Type is a SELinux type label that applies to the container.",
              "type": [
                "string",
                "null"
              ]
            },
            "user": {
              "description": "User is a SELinux user label that applies to the container.",
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "seccompProfile": {
          "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "type"
          ],
          "properties": {
            "localhostProfile": {
              "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.",
              "type": [
                "string",
                "null"
              ]
            },
            "type": {
              "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.\n\nPossible enum values:\n - `\"Localhost\"` indicates a profile defined in a file on the node should be used. The file's location relative to <kubelet-root-dir>/seccomp.\n - `\"RuntimeDefault\"` represents the default container runtime seccomp profile.\n - `\"Unconfined\"` indicates no seccomp profile is applied (A.K.A. unconfined).",
              "type": "string",
              "enum": [
                "Localhost",
                "RuntimeDefault",
                "Unconfined"
              ]
            }
          },
          "x-kubernetes-unions": [
            {
              "discriminator": "type",
              "fields-to-discriminateBy": {
                "localhostProfile": "LocalhostProfile"
              }
            }
          ]
        },
        "windowsOptions": {
          "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "gmsaCredentialSpec": {
              "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
              "type": [
                "string",
                "null"
              ]
            },
            "gmsaCredentialSpecName": {
              "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
              "type": [
                "string",
                "null"
              ]
            },
            "hostProcess": {
              "description": "HostProcess determines if a container should be run as a 'Host Process' container. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers). In addition, if HostProcess is true then HostNetwork must also be set to true.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "runAsUserName": {
              "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      }
    },
    "startupProbe": {
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "exec": {
          "description": "ExecAction describes a \"run in container\" action.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "command": {
              "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "x-kubernetes-list-type": "atomic"
            }
          }
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "grpc": {
          "description": "GRPCAction specifies an action involving a GRPC service.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "port"
          ],
          "properties": {
            "port": {
              "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
              "type": "integer",
              "format": "int32"
            },
            "service": {
              "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "httpGet": {
          "description": "HTTPGetAction describes an action based on HTTP Get requests.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "port"
          ],
          "properties": {
            "host": {
              "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
              "type": [
                "string",
                "null"
              ]
            },
            "httpHeaders": {
              "description": "Custom headers to set in the request. HTTP allows repeated headers.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "HTTPHeader describes a custom header to be used in HTTP probes",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "name",
                  "value"
                ],
                "properties": {
                  "name": {
                    "description": "The header field name. This will be canonicalized upon output, so case-variant names will be understood as the same header.",
                    "type": "string"
                  },
                  "value": {
                    "description": "The header field value",
                    "type": "string"
                  }
                }
              },
              "x-kubernetes-list-type": "atomic"
            },
            "path": {
              "description": "Path to access on the HTTP server.",
              "type": [
                "string",
                "null"
              ]
            },
            "port": {
              "oneOf": [
                {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                {
                  "type": [
                    "integer",
                    "null"
                  ]
                }
              ]
            },
            "scheme": {
              "description": "Scheme to use for connecting to the host. Defaults to HTTP.\n\nPossible enum values:\n - `\"HTTP\"` means that the scheme used will be http://\n - `\"HTTPS\"` means that the scheme used will be https://",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "HTTP",
                "HTTPS"
              ]
            }
          }
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "tcpSocket": {
          "description": "TCPSocketAction describes an action based on opening a socket",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "port"
          ],
          "properties": {
            "host": {
              "description": "Optional: Host name to connect to, defaults to the pod IP.",
              "type": [
                "string",
                "null"
              ]
            },
            "port": {
              "oneOf": [
                {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                {
                  "type": [
                    "integer",
                    "null"
                  ]
                }
              ]
            }
          }
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        }
      }
    },
    "stdin": {
      "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "stdinOnce": {
      "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
      "type": [
        "boolean",
        "null"
      ]
    },
    "terminationMessagePath": {
      "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
      "type": [
        "string",
        "null"
      ]
    },
    "terminationMessagePolicy": {
      "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\nPossible enum values:\n - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.\n - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "FallbackToLogsOnError",
        "File"
      ]
    },
    "tty": {
      "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "volumeDevices": {
      "description": "volumeDevices is the list of block devices to be used by the container.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "volumeDevice describes a mapping of a raw block device within a container.",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "name",
          "devicePath"
        ],
        "properties": {
          "devicePath": {
            "description": "devicePath is the path inside of the container that the device will be mapped to.",
            "type": "string"
          },
          "name": {
            "description": "name must match the name of a persistentVolumeClaim in the pod",
            "type": "string"
          }
        }
      },
      "x-kubernetes-list-map-keys": [
        "devicePath"
      ],
      "x-kubernetes-list-type": "map",
      "x-kubernetes-patch-merge-key": "devicePath",
      "x-kubernetes-patch-strategy": "merge"
    },
    "volumeMounts": {
      "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "VolumeMount describes a mounting of a Volume within a container.",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "name",
          "mountPath"
        ],
        "properties": {
          "mountPath": {
            "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
            "type": "string"
          },
          "mountPropagation": {
            "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10. When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified (which defaults to None).\n\nPossible enum values:\n - `\"Bidirectional\"` means that the volume in a container will receive new mounts from the host or other containers, and its own mounts will be propagated from the container to the host or other containers. Note that this mode is recursively applied to all mounts in the volume (\"rshared\" in Linux terminology).\n - `\"HostToContainer\"` means that the volume in a container will receive new mounts from the host or other containers, but filesystems mounted inside the container won't be propagated to the host or other containers. Note that this mode is recursively applied to all mounts in the volume (\"rslave\" in Linux terminology).\n - `\"None\"` means that the volume in a container will not receive new mounts from the host or other containers, and filesystems mounted inside the container won't be propagated to the host or other containers. Note that this mode corresponds to \"private\" in Linux terminology.",
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "Bidirectional",
              "HostToContainer",
              "None"
            ]
          },
          "name": {
            "description": "This must match the Name of a Volume.",
            "type": "string"
          },
          "readOnly": {
            "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
            "type": [
              "boolean",
              "null"
            ]
          },
          "recursiveReadOnly": {
            "description": "RecursiveReadOnly specifies whether read-only mounts should be handled recursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made recursively read-only.  If this field is set to IfPossible, the mount is made recursively read-only, if it is supported by the container runtime.  If this field is set to Enabled, the mount is made recursively read-only if it is supported by the container runtime, otherwise the pod will not be started and an error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to None (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.",
            "type": [
              "string",
              "null"
            ]
          },
          "subPath": {
            "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
            "type": [
              "string",
              "null"
            ]
          },
          "subPathExpr": {
            "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "x-kubernetes-list-map-keys": [
        "mountPath"
      ],
      "x-kubernetes-list-type": "map",
      "x-kubernetes-patch-merge-key": "mountPath",
      "x-kubernetes-patch-strategy": "merge"
    },
    "workingDir": {
      "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
      "type": [
        "string",
        "null"
      ]
    }
  },
  "$schema": "http://json-schema.org/schema#"
}